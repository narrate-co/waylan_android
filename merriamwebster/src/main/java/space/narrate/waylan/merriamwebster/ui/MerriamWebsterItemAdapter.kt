package space.narrate.waylan.merriamwebster.ui

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.LinearLayout
import androidx.recyclerview.widget.AsyncDifferConfig
import androidx.recyclerview.widget.AsyncListDiffer
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListUpdateCallback
import space.narrate.waylan.merriamwebster.data.local.MwWordAndDefinitionGroups
import space.narrate.waylan.android.data.firestore.users.User
import java.lang.IllegalArgumentException

/**
 * An adapter that handles the addition, removal, moving and changing of views inside a
 * LinearLayout.
 */
class MerriamWebsterItemAdapter(
    private val container: LinearLayout,
    private val listener: Listener
): ListUpdateCallback {

    interface Listener {
        fun onRelatedWordClicked(word: String)
        fun onDetailsButtonClicked()
        fun onDismissButtonClicked()
    }

    private val differ = AsyncListDiffer(
        this,
        AsyncDifferConfig.Builder(DIFF_CALLBACK).build()
    )

    /**
     * Change the currently displayed list of item, for the items which will be generated by
     * [MerriamWebsterList.generate].
     *
     * This method will diff the current and newly generated list and update the container's views
     * as needed.
     */
    fun submit(entries: List<MwWordAndDefinitionGroups>, user: User?) {
        differ.submitList(MerriamWebsterList.generate(entries, user))
    }

    private fun getItem(position: Int): MerriamWebsterItemModel {
        return differ.currentList[position]
    }

    private fun getViewType(position: Int): Int {
        return when (getItem(position)) {
            is MerriamWebsterItemModel.PartOfSpeechModel -> VIEW_TYPE_PART_OF_SPEECH
            is MerriamWebsterItemModel.DefinitionModel -> VIEW_TYPE_DEFINITION
            is MerriamWebsterItemModel.RelatedModel -> VIEW_TYPE_RELATED
            is MerriamWebsterItemModel.PermissionPaneModel -> VIEW_TYPE_PERMISSION_PANE
        }
    }

    private fun onBindView(view: View, item: MerriamWebsterItemModel) {
        when (item) {
            is MerriamWebsterItemModel.PartOfSpeechModel ->
                MerriamWebsterItemBinder.PartOfSpeechBinder.bind(view, item, listener)
            is MerriamWebsterItemModel.DefinitionModel ->
                MerriamWebsterItemBinder.DefinitionBinder.bind(view, item, listener)
            is MerriamWebsterItemModel.RelatedModel ->
                MerriamWebsterItemBinder.RelatedBinder.bind(view, item, listener)
            is MerriamWebsterItemModel.PermissionPaneModel ->
                MerriamWebsterItemBinder.PermissionPaneBinder.bind(view, item, listener)
        }
    }

    private fun onCreateView(parent: ViewGroup, viewType: Int): View {
        return LayoutInflater.from(parent.context).inflate(when (viewType) {
            VIEW_TYPE_PART_OF_SPEECH -> MerriamWebsterItemBinder.PartOfSpeechBinder.layout
            VIEW_TYPE_DEFINITION -> MerriamWebsterItemBinder.DefinitionBinder.layout
            VIEW_TYPE_RELATED -> MerriamWebsterItemBinder.RelatedBinder.layout
            VIEW_TYPE_PERMISSION_PANE -> MerriamWebsterItemBinder.PermissionPaneBinder.layout
            else -> throw IllegalArgumentException("Unsupported view listType = [$viewType]")
        }, parent, false)
    }

    override fun onChanged(position: Int, count: Int, payload: Any?) {
        (position until (position + count)).forEach { i ->
            onBindView(container.getChildAt(i), getItem(i))
        }
    }

    override fun onMoved(fromPosition: Int, toPosition: Int) {
        container.apply {
            val view = getChildAt(fromPosition)
            removeViewAt(fromPosition)
            addView(view, toPosition)
        }
    }

    override fun onInserted(position: Int, count: Int) {
        (position until (position + count)).forEach { i ->
            val view = onCreateView(container, getViewType(i))
            onBindView(view, getItem(i))
            container.addView(view, i)
        }
    }

    override fun onRemoved(position: Int, count: Int) {
        ((position + count - 1) downTo position).forEach { i ->
            container.removeViewAt(i)
        }
    }

    companion object {
        private const val VIEW_TYPE_PART_OF_SPEECH = 0
        private const val VIEW_TYPE_DEFINITION = 1
        private const val VIEW_TYPE_RELATED = 2
        private const val VIEW_TYPE_PERMISSION_PANE = 3

        private val DIFF_CALLBACK = object : DiffUtil.ItemCallback<MerriamWebsterItemModel>() {
            override fun areItemsTheSame(
                oldItem: MerriamWebsterItemModel,
                newItem: MerriamWebsterItemModel
            ): Boolean {
                return oldItem.isSameAs(newItem)
            }

            override fun areContentsTheSame(
                oldItem: MerriamWebsterItemModel,
                newItem: MerriamWebsterItemModel
            ): Boolean {
                return oldItem.isContentSameAs(newItem)
            }
        }
    }

}